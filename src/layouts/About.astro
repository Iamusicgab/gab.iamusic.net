---
import "dotenv/config";
import Placeholder from "../components/Placeholder.astro";
import Pic from "../components/Pic.astro";
import SmallPlaceholder from "../components/SmallPlaceholder.astro";
import QueryString from "query-string";
import Button from "../components/Button.astro";
const refresh_token = process.env.REFRESH_TOKEN;
const basic = process.env.BASIC;

const getAccessToken = async () => {
	const url = "https://accounts.spotify.com/api/token";
	const payload = {
		method: "POST",
		headers: {
			"Content-Type": "application/x-www-form-urlencoded",
			Authorization: `Basic ${basic}`,
		},
		body: QueryString.stringify({
			grant_type: "refresh_token",
			refresh_token,
		}),
	};

	const res = await fetch(url, payload);
	const data = await res.json();
	return data;
};

const getTopArtists = async () => {
	const { access_token } = await getAccessToken();
	const url =
		"https://api.spotify.com/v1/me/top/artists?time_range=short_term&limit=1";
	const payload = {
		method: "GET",
		headers: {
			Authorization: `Bearer ${access_token}`,
		},
	};
	const res = await fetch(url, payload);
	const data = await res.json();
	return data;
};
const getTopTracks = async () => {
	const { access_token } = await getAccessToken();
	const url =
		"https://api.spotify.com/v1/me/top/tracks?time_range=short_term&limit=5";
	const payload = {
		method: "GET",
		headers: {
			Authorization: `Bearer ${access_token}`,
		},
	};
	const res = await fetch(url, payload);
	const data = await res.json();
	return data;
};

const recentlyPlayed = async () => {
	const { access_token } = await getAccessToken();
	const url = "https://api.spotify.com/v1/me/player/recently-played";
	const payload = {
		method: "GET",
		headers: {
			Authorization: `Bearer ${access_token}`,
		},
	};
	const res = await fetch(url, payload);
	const data = await res.json();
	return data;
};

const tracks = await getTopTracks();
const played = await recentlyPlayed();
---

<container
	class="w-full max-w-screen-2xl p-5 gap-10 flex flex-col items-center"
>
	<Placeholder color="bg-borange" text="About Me" textColor="text-bwhite" />
	<div
		class="flex flex-col md:flex-row gap-10 w-full max-w-screen-lg justify-around items-center"
	>
		<Pic
			src="https://lh3.googleusercontent.com/pw/AP1GczNSD59P9b05u0U8O9sShhFyQo_UCJQS6oxTlmy7nVXD_U9oNUnDQk1ivF_DXIGDGXJ000_KakZ6f6offs6kxnTKlOGpdqlSOlkYmzLmbmc84b4EKF4iuEYZ63osDFg5SHY91uBmW2oXJUKTyonKy12doA=w1342-h1794-s-no-gm?authuser=0"
			aspect="aspect-square"
			svg="/star3.svg"
			svg2="/heart.svg"
			rotate="rotate-6"
		/>
		<div
			class="gap-4 max-w-sm text-center md:text-right flex flex-col items-center"
		>
			<p class="">
				Iâ€™m <b>Gabriel Alexis Gonzales</b>, aka <b>Iamusicgabriel</b>. Student
				at <b>Don Bosco Makati</b>. A <b
					>Student leader, front-end dev, video editor, artist!</b
				>
			</p>
			<Button
				class="hover:scale-105"
				color="bg-white w-fit"
				text="Bionote"
				href="/bionote"
			/>
		</div>
	</div>

	<div
		class="flex flex-col md:flex-row-reverse gap-10 w-full max-w-screen-lg justify-around items-center mt-10"
	>
		<Pic
			src="https://lh3.googleusercontent.com/pw/ABLVV85AlsQ5dvbRuoVt23mMMwiE8xNtgK96rSQ6vZ1ACpepgp_RZPpWgdA4AktNSBMHluXHAhuUYVZCJ6vWqDkuPC2LkplsGlxT4z57b7rxdMB1EfAxoldJ=w2400"
			aspect="aspect-square"
			svg="/ribbon.svg"
			svg2="/star2.svg"
			rotate="-rotate-6"
		/>
		<div class="flex flex-col gap-4 items-center md:items-start">
			<SmallPlaceholder color="bg-bwhite" text="intp-t" />
			<SmallPlaceholder color="bg-bwhite" text="adventure time fan" />
			<div class="indicator">
				<span class="indicator-item"
					><img src="/pb.png" class="w-10 rotate-12" /></span
				>
				<SmallPlaceholder color="bg-bwhite" text="i <3 bonnibel" />
			</div>

			<SmallPlaceholder color="bg-bwhite" text="nerd ðŸ¤“" />
			<SmallPlaceholder color="bg-bwhite" text="single ðŸ˜†ðŸ˜†ðŸ˜†" />
		</div>
	</div>
	<div class="divider"></div>
	<!-- Spotify shizz -->
	<SmallPlaceholder color="bg-green-400" text="Spotify shizz" />
	<div
		class="flex flex-col justify-center items-center gap-2 w-full max-w-screen-lg"
	>
		<SmallPlaceholder
			color="bg-bblue"
			text="recently played"
			textColor="text-bwhite"
		/>
		{
			(
				<a
					class={`bg-bwhite w-full max-w-sm md:max-w-lg flex flex-row justify-center p-2 border-4 border-bblack rounded-xl shadow-[-5px_7px_rgba(0,0,0,1)] hover:scale-105 transition-all`}
					href={played.items[0].track.external_urls.spotify}
				>
					<div class="flex flex-col w-full justify-center">
						<span class={`text-sm md:text-lg text-left text-bblack`}>
							{() => {
								const name = played.items[0].track.name;
								if (name.length > 30) {
									return name.slice(0, 30) + "...";
								}
								return name;
							}}
						</span>
						<span
							class={`text-xs md:text-sm text-left items-center text-bblack`}
						>
							{played.items[0].track.artists[0].name}
						</span>
					</div>
					<div class="flex items-center">
						<img
							src={played.items[0].track.album.images[0].url}
							class="max-h-14 rounded shadow-md"
						/>
					</div>
				</a>
			)
		}
	</div>
	<div
		class="flex flex-col md:flex-row gap-12 w-full max-w-screen-lg items-center justify-between md:p-10"
	>
		<!-- Top Artist API -->
		{
			async () => {
				const res = await getTopArtists();

				return (
					<div class="indicator -rotate-6">
						<div
							class={`bg-borange w-fit max-w-md flex justify-center p-2 border-4 border-bblack rounded-xl shadow-[-5px_7px_rgba(0,0,0,1)] indicator-item indicator-center xl:indicator-start indicator-top`}
						>
							<span
								class={`text-md md:text-xl flex text-center items-center text-bwhite`}
							>
								top artist
								<slot />
							</span>
						</div>
						<div
							class={`bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 w-fit max-w-md flex justify-center p-2 border-4 border-bblack rounded-xl shadow-[-5px_7px_rgba(0,0,0,1)] indicator-item indicator-center xl:indicator-end indicator-bottom`}
						>
							<span
								class={`text-md md:text-xl flex text-center items-center text-bwhite`}
							>
								{res.items[0].name}
								<slot />
							</span>
						</div>

						<Pic src={res.items[0].images[0].url} aspect="aspect-square" />
					</div>
				);
			}
		}

		<!-- Top Tracks API -->

		<div
			class="flex flex-col items-center md:items-end justify-center w-full gap-2"
		>
			<div
				class={`bg-borange w-fit max-w-md flex justify-center p-2 border-4 border-bblack rounded-xl shadow-[-5px_7px_rgba(0,0,0,1)] indicator-item indicator-center xl:indicator-start indicator-top`}
			>
				<span
					class={`text-md md:text-xl flex text-center items-center text-bwhite`}
				>
					top songs
				</span>
			</div>
			{
				tracks.items.map((res, index) => (
					<a
						class={`bg-bwhite w-full max-w-sm md:max-w-lg flex flex-row justify-center p-2 border-4 border-bblack rounded-xl shadow-[-5px_7px_rgba(0,0,0,1)] hover:scale-105 transition-all gap-2`}
						href={res.external_urls.spotify}
					>
						<div class="flex items-center mx-2 gap-2 justify-center">
							<span
								class={`text-xs md:text-sm text-center items-center text-bblack`}
							>
								{index + 1}
							</span>
							<img
								src={res.album.images[0].url}
								class="aspect-[1/1] max-h-14 rounded shadow-md"
							/>
						</div>
						<div class="flex flex-col w-full justify-center">
							<span class={`text-sm md:text-lg text-right text-bblack`}>
								{() => {
									const name = res.name;
									if (name.length > 28) {
										return name.slice(0, 28) + "...";
									}
									return name;
								}}
							</span>
							<span
								class={`text-xs md:text-sm text-right items-center text-bblack`}
							>
								{res.artists[0].name}
							</span>
						</div>
					</a>
				))
			}
		</div>
	</div>
</container>
